// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class AesDecryptReq {
  final Uint8List key;
  final Uint8List iv;
  final Uint8List cipherText;

  const AesDecryptReq({
    required this.key,
    required this.iv,
    required this.cipherText,
  });

  @override
  int get hashCode => key.hashCode ^ iv.hashCode ^ cipherText.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AesDecryptReq &&
          runtimeType == other.runtimeType &&
          key == other.key &&
          iv == other.iv &&
          cipherText == other.cipherText;
}

class AesEncryptReq {
  final Uint8List key;
  final Uint8List iv;
  final Uint8List message;

  const AesEncryptReq({
    required this.key,
    required this.iv,
    required this.message,
  });

  @override
  int get hashCode => key.hashCode ^ iv.hashCode ^ message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AesEncryptReq &&
          runtimeType == other.runtimeType &&
          key == other.key &&
          iv == other.iv &&
          message == other.message;
}

class BLSVerifyReq {
  final Uint8List signature;
  final Uint8List message;
  final Uint8List publicKey;

  const BLSVerifyReq({
    required this.signature,
    required this.message,
    required this.publicKey,
  });

  @override
  int get hashCode =>
      signature.hashCode ^ message.hashCode ^ publicKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BLSVerifyReq &&
          runtimeType == other.runtimeType &&
          signature == other.signature &&
          message == other.message &&
          publicKey == other.publicKey;
}

class ED25519FromSeedReq {
  final Uint8List seed;

  const ED25519FromSeedReq({
    required this.seed,
  });

  @override
  int get hashCode => seed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ED25519FromSeedReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed;
}

class ED25519Res {
  final Uint8List seed;
  final Uint8List publicKey;

  const ED25519Res({
    required this.seed,
    required this.publicKey,
  });

  @override
  int get hashCode => seed.hashCode ^ publicKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ED25519Res &&
          runtimeType == other.runtimeType &&
          seed == other.seed &&
          publicKey == other.publicKey;
}

class ED25519SignReq {
  final Uint8List seed;
  final Uint8List message;

  const ED25519SignReq({
    required this.seed,
    required this.message,
  });

  @override
  int get hashCode => seed.hashCode ^ message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ED25519SignReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed &&
          message == other.message;
}

class ED25519VerifyReq {
  final Uint8List sig;
  final Uint8List message;
  final Uint8List pubKey;

  const ED25519VerifyReq({
    required this.sig,
    required this.message,
    required this.pubKey,
  });

  @override
  int get hashCode => sig.hashCode ^ message.hashCode ^ pubKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ED25519VerifyReq &&
          runtimeType == other.runtimeType &&
          sig == other.sig &&
          message == other.message &&
          pubKey == other.pubKey;
}

class KeyDerivedRes {
  final Uint8List leftBits;
  final Uint8List rightBits;

  const KeyDerivedRes({
    required this.leftBits,
    required this.rightBits,
  });

  @override
  int get hashCode => leftBits.hashCode ^ rightBits.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is KeyDerivedRes &&
          runtimeType == other.runtimeType &&
          leftBits == other.leftBits &&
          rightBits == other.rightBits;
}

class P256FromSeedReq {
  final Uint8List seed;

  const P256FromSeedReq({
    required this.seed,
  });

  @override
  int get hashCode => seed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is P256FromSeedReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed;
}

class P256ShareSecretReq {
  final Uint8List seed;
  final Uint8List publicKeyRawBytes;

  const P256ShareSecretReq({
    required this.seed,
    required this.publicKeyRawBytes,
  });

  @override
  int get hashCode => seed.hashCode ^ publicKeyRawBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is P256ShareSecretReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed &&
          publicKeyRawBytes == other.publicKeyRawBytes;
}

class P256SignWithSeedReq {
  final Uint8List msg;
  final Uint8List seed;

  const P256SignWithSeedReq({
    required this.msg,
    required this.seed,
  });

  @override
  int get hashCode => msg.hashCode ^ seed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is P256SignWithSeedReq &&
          runtimeType == other.runtimeType &&
          msg == other.msg &&
          seed == other.seed;
}

class P256VerifyReq {
  final Uint8List messageHash;
  final Uint8List signatureBytes;
  final Uint8List publicKeyBytes;

  const P256VerifyReq({
    required this.messageHash,
    required this.signatureBytes,
    required this.publicKeyBytes,
  });

  @override
  int get hashCode =>
      messageHash.hashCode ^ signatureBytes.hashCode ^ publicKeyBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is P256VerifyReq &&
          runtimeType == other.runtimeType &&
          messageHash == other.messageHash &&
          signatureBytes == other.signatureBytes &&
          publicKeyBytes == other.publicKeyBytes;
}

class PBKDFDeriveReq {
  final Uint8List password;
  final Uint8List salt;
  final int c;

  const PBKDFDeriveReq({
    required this.password,
    required this.salt,
    required this.c,
  });

  @override
  int get hashCode => password.hashCode ^ salt.hashCode ^ c.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PBKDFDeriveReq &&
          runtimeType == other.runtimeType &&
          password == other.password &&
          salt == other.salt &&
          c == other.c;
}

class PhraseToSeedReq {
  final String phrase;
  final String password;

  const PhraseToSeedReq({
    required this.phrase,
    required this.password,
  });

  @override
  int get hashCode => phrase.hashCode ^ password.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PhraseToSeedReq &&
          runtimeType == other.runtimeType &&
          phrase == other.phrase &&
          password == other.password;
}

class SchnorrFromSeedReq {
  final Uint8List seed;

  const SchnorrFromSeedReq({
    required this.seed,
  });

  @override
  int get hashCode => seed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SchnorrFromSeedReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed;
}

class SchnorrSignWithSeedReq {
  final Uint8List msg;
  final Uint8List seed;
  final Uint8List? auxRand;

  const SchnorrSignWithSeedReq({
    required this.msg,
    required this.seed,
    this.auxRand,
  });

  @override
  int get hashCode => msg.hashCode ^ seed.hashCode ^ auxRand.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SchnorrSignWithSeedReq &&
          runtimeType == other.runtimeType &&
          msg == other.msg &&
          seed == other.seed &&
          auxRand == other.auxRand;
}

class SchnorrVerifyReq {
  final Uint8List messageHash;
  final Uint8List signatureBytes;
  final Uint8List publicKeyBytes;

  const SchnorrVerifyReq({
    required this.messageHash,
    required this.signatureBytes,
    required this.publicKeyBytes,
  });

  @override
  int get hashCode =>
      messageHash.hashCode ^ signatureBytes.hashCode ^ publicKeyBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SchnorrVerifyReq &&
          runtimeType == other.runtimeType &&
          messageHash == other.messageHash &&
          signatureBytes == other.signatureBytes &&
          publicKeyBytes == other.publicKeyBytes;
}

class ScriptDeriveReq {
  final Uint8List password;
  final Uint8List salt;
  final int n;
  final int p;
  final int r;

  const ScriptDeriveReq({
    required this.password,
    required this.salt,
    required this.n,
    required this.p,
    required this.r,
  });

  @override
  int get hashCode =>
      password.hashCode ^ salt.hashCode ^ n.hashCode ^ p.hashCode ^ r.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ScriptDeriveReq &&
          runtimeType == other.runtimeType &&
          password == other.password &&
          salt == other.salt &&
          n == other.n &&
          p == other.p &&
          r == other.r;
}

class Secp256k1FromSeedReq {
  final Uint8List seed;

  const Secp256k1FromSeedReq({
    required this.seed,
  });

  @override
  int get hashCode => seed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1FromSeedReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed;
}

class Secp256k1RecoverReq {
  final Uint8List messagePreHashed;
  final Uint8List signatureBytes;
  final int? chainId;

  const Secp256k1RecoverReq({
    required this.messagePreHashed,
    required this.signatureBytes,
    this.chainId,
  });

  @override
  int get hashCode =>
      messagePreHashed.hashCode ^ signatureBytes.hashCode ^ chainId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1RecoverReq &&
          runtimeType == other.runtimeType &&
          messagePreHashed == other.messagePreHashed &&
          signatureBytes == other.signatureBytes &&
          chainId == other.chainId;
}

class Secp256k1ShareSecretReq {
  final Uint8List seed;
  final Uint8List publicKeyRawBytes;

  const Secp256k1ShareSecretReq({
    required this.seed,
    required this.publicKeyRawBytes,
  });

  @override
  int get hashCode => seed.hashCode ^ publicKeyRawBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1ShareSecretReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed &&
          publicKeyRawBytes == other.publicKeyRawBytes;
}

class Secp256k1SignWithRngReq {
  final Uint8List msg;
  final Uint8List privateBytes;

  const Secp256k1SignWithRngReq({
    required this.msg,
    required this.privateBytes,
  });

  @override
  int get hashCode => msg.hashCode ^ privateBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1SignWithRngReq &&
          runtimeType == other.runtimeType &&
          msg == other.msg &&
          privateBytes == other.privateBytes;
}

class Secp256k1SignWithSeedReq {
  final Uint8List msg;
  final Uint8List seed;

  const Secp256k1SignWithSeedReq({
    required this.msg,
    required this.seed,
  });

  @override
  int get hashCode => msg.hashCode ^ seed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1SignWithSeedReq &&
          runtimeType == other.runtimeType &&
          msg == other.msg &&
          seed == other.seed;
}

class Secp256k1VerifyReq {
  final Uint8List messageHash;
  final Uint8List signatureBytes;
  final Uint8List publicKeyBytes;

  const Secp256k1VerifyReq({
    required this.messageHash,
    required this.signatureBytes,
    required this.publicKeyBytes,
  });

  @override
  int get hashCode =>
      messageHash.hashCode ^ signatureBytes.hashCode ^ publicKeyBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1VerifyReq &&
          runtimeType == other.runtimeType &&
          messageHash == other.messageHash &&
          signatureBytes == other.signatureBytes &&
          publicKeyBytes == other.publicKeyBytes;
}

class SeedToKeyReq {
  final Uint8List seed;
  final String path;

  const SeedToKeyReq({
    required this.seed,
    required this.path,
  });

  @override
  int get hashCode => seed.hashCode ^ path.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SeedToKeyReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed &&
          path == other.path;
}

class SignatureFFI {
  /// This is the DER-encoded public key.
  final Uint8List? publicKey;

  /// The signature bytes.
  final Uint8List? signature;

  const SignatureFFI({
    this.publicKey,
    this.signature,
  });

  @override
  int get hashCode => publicKey.hashCode ^ signature.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SignatureFFI &&
          runtimeType == other.runtimeType &&
          publicKey == other.publicKey &&
          signature == other.signature;
}
