// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'p256.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'schnorr.dart';
import 'secp256k1.dart';
import 'types.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `Api`, `RUNTIME`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `initialize`

/// --------------------
/// mnemonic
/// --------------------
/// create_phrase
/// phrase_to_seed
/// seed_to_key
Future<Uint8List> mnemonicPhraseToSeed({required PhraseToSeedReq req}) =>
    AgentDart.instance.api.crateApiMnemonicPhraseToSeed(req: req);

Future<Uint8List> mnemonicSeedToKey({required SeedToKeyReq req}) =>
    AgentDart.instance.api.crateApiMnemonicSeedToKey(req: req);

/// --------------------
/// bls
/// --------------------
/// bls_init
/// bls_verify
Future<bool> blsInit() => AgentDart.instance.api.crateApiBlsInit();

Future<bool> blsVerify({required BLSVerifyReq req}) =>
    AgentDart.instance.api.crateApiBlsVerify(req: req);

/// --------------
/// ed25519
/// --------------------
/// ed25519_from_seed
/// ed25519_sign
/// ed25519_verify
Future<ED25519Res> ed25519FromSeed({required ED25519FromSeedReq req}) =>
    AgentDart.instance.api.crateApiEd25519FromSeed(req: req);

Future<Uint8List> ed25519Sign({required ED25519SignReq req}) =>
    AgentDart.instance.api.crateApiEd25519Sign(req: req);

Future<bool> ed25519Verify({required ED25519VerifyReq req}) =>
    AgentDart.instance.api.crateApiEd25519Verify(req: req);

/// ---------------------
/// secp256k1
/// ---------------------
Future<Secp256k1IdentityExport> secp256K1FromSeed(
        {required Secp256k1FromSeedReq req}) =>
    AgentDart.instance.api.crateApiSecp256K1FromSeed(req: req);

Future<SignatureFFI> secp256K1Sign({required Secp256k1SignWithSeedReq req}) =>
    AgentDart.instance.api.crateApiSecp256K1Sign(req: req);

Future<SignatureFFI> secp256K1SignWithRng(
        {required Secp256k1SignWithRngReq req}) =>
    AgentDart.instance.api.crateApiSecp256K1SignWithRng(req: req);

Future<SignatureFFI> secp256K1SignRecoverable(
        {required Secp256k1SignWithSeedReq req}) =>
    AgentDart.instance.api.crateApiSecp256K1SignRecoverable(req: req);

Future<bool> secp256K1Verify({required Secp256k1VerifyReq req}) =>
    AgentDart.instance.api.crateApiSecp256K1Verify(req: req);

Future<Uint8List> secp256K1GetSharedSecret(
        {required Secp256k1ShareSecretReq req}) =>
    AgentDart.instance.api.crateApiSecp256K1GetSharedSecret(req: req);

Future<Uint8List> secp256K1Recover({required Secp256k1RecoverReq req}) =>
    AgentDart.instance.api.crateApiSecp256K1Recover(req: req);

/// ---------------------
/// secp256r1
/// ---------------------
Future<P256IdentityExport> p256FromSeed({required P256FromSeedReq req}) =>
    AgentDart.instance.api.crateApiP256FromSeed(req: req);

Future<SignatureFFI> p256Sign({required P256SignWithSeedReq req}) =>
    AgentDart.instance.api.crateApiP256Sign(req: req);

Future<bool> p256Verify({required P256VerifyReq req}) =>
    AgentDart.instance.api.crateApiP256Verify(req: req);

Future<Uint8List> p256GetSharedSecret({required P256ShareSecretReq req}) =>
    AgentDart.instance.api.crateApiP256GetSharedSecret(req: req);

/// ---------------------
/// schnorr
/// ---------------------
Future<SchnorrIdentityExport> schnorrFromSeed(
        {required SchnorrFromSeedReq req}) =>
    AgentDart.instance.api.crateApiSchnorrFromSeed(req: req);

Future<SignatureFFI> schnorrSign({required SchnorrSignWithSeedReq req}) =>
    AgentDart.instance.api.crateApiSchnorrSign(req: req);

Future<bool> schnorrVerify({required SchnorrVerifyReq req}) =>
    AgentDart.instance.api.crateApiSchnorrVerify(req: req);

/// ---------------------
/// aes
/// ---------------------
Future<Uint8List> aes128CtrEncrypt({required AesEncryptReq req}) =>
    AgentDart.instance.api.crateApiAes128CtrEncrypt(req: req);

Future<Uint8List> aes128CtrDecrypt({required AesDecryptReq req}) =>
    AgentDart.instance.api.crateApiAes128CtrDecrypt(req: req);

Future<Uint8List> aes256CbcEncrypt({required AesEncryptReq req}) =>
    AgentDart.instance.api.crateApiAes256CbcEncrypt(req: req);

Future<Uint8List> aes256CbcDecrypt({required AesDecryptReq req}) =>
    AgentDart.instance.api.crateApiAes256CbcDecrypt(req: req);

Future<Uint8List> aes256GcmEncrypt({required AesEncryptReq req}) =>
    AgentDart.instance.api.crateApiAes256GcmEncrypt(req: req);

Future<Uint8List> aes256GcmDecrypt({required AesDecryptReq req}) =>
    AgentDart.instance.api.crateApiAes256GcmDecrypt(req: req);

Future<KeyDerivedRes> pbkdf2DeriveKey({required PBKDFDeriveReq req}) =>
    AgentDart.instance.api.crateApiPbkdf2DeriveKey(req: req);

Future<KeyDerivedRes> scryptDeriveKey({required ScriptDeriveReq req}) =>
    AgentDart.instance.api.crateApiScryptDeriveKey(req: req);
