// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.10.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 796173266;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__aes_128_ctr_decrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aes_128_ctr_decrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::AesDecryptReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::aes_128_ctr_decrypt(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__aes_128_ctr_encrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aes_128_ctr_encrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::AesEncryptReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::aes_128_ctr_encrypt(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__aes_256_cbc_decrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aes_256_cbc_decrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::AesDecryptReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::aes_256_cbc_decrypt(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__aes_256_cbc_encrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aes_256_cbc_encrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::AesEncryptReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::aes_256_cbc_encrypt(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__aes_256_gcm_decrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aes_256_gcm_decrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::AesDecryptReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::aes_256_gcm_decrypt(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__aes_256_gcm_encrypt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aes_256_gcm_encrypt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::AesEncryptReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::aes_256_gcm_encrypt(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__bls_init_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bls_init",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::bls_init())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__bls_verify_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bls_verify",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::BLSVerifyReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::bls_verify(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__ed25519_from_seed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ed25519_from_seed",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::ED25519FromSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::ed25519_from_seed(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__ed25519_sign_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ed25519_sign",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::ED25519SignReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::ed25519_sign(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__ed25519_verify_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ed25519_verify",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::ED25519VerifyReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::ed25519_verify(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__mnemonic_phrase_to_seed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mnemonic_phrase_to_seed",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::PhraseToSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::mnemonic_phrase_to_seed(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__mnemonic_seed_to_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mnemonic_seed_to_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::SeedToKeyReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::mnemonic_seed_to_key(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__p256_from_seed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "p256_from_seed",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::P256FromSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::p256_from_seed(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__p256_get_shared_secret_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "p256_get_shared_secret",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::P256ShareSecretReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::p256_get_shared_secret(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__p256_sign_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "p256_sign",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::P256SignWithSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::p256_sign(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__p256_verify_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "p256_verify",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::P256VerifyReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::p256_verify(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__pbkdf2_derive_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "pbkdf2_derive_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::PBKDFDeriveReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::pbkdf2_derive_key(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__schnorr_from_seed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "schnorr_from_seed",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::SchnorrFromSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::schnorr_from_seed(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__schnorr_sign_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "schnorr_sign",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::SchnorrSignWithSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::schnorr_sign(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__schnorr_verify_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "schnorr_verify",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::SchnorrVerifyReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::schnorr_verify(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__scrypt_derive_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "scrypt_derive_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::ScriptDeriveReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::scrypt_derive_key(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__secp256k1_from_seed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "secp256k1_from_seed",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::Secp256k1FromSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::secp256k1_from_seed(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__secp256k1_get_shared_secret_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "secp256k1_get_shared_secret",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::Secp256k1ShareSecretReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::secp256k1_get_shared_secret(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__secp256k1_recover_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "secp256k1_recover",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::Secp256k1RecoverReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::secp256k1_recover(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__secp256k1_sign_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "secp256k1_sign",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::Secp256k1SignWithSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::secp256k1_sign(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__secp256k1_sign_recoverable_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "secp256k1_sign_recoverable",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::Secp256k1SignWithSeedReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::secp256k1_sign_recoverable(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__secp256k1_sign_with_rng_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "secp256k1_sign_with_rng",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::Secp256k1SignWithRngReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::secp256k1_sign_with_rng(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__secp256k1_verify_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "secp256k1_verify",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::types::Secp256k1VerifyReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::secp256k1_verify(api_req))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::types::AesDecryptReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <Vec<u8>>::sse_decode(deserializer);
        let mut var_iv = <Vec<u8>>::sse_decode(deserializer);
        let mut var_cipherText = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::AesDecryptReq {
            key: var_key,
            iv: var_iv,
            cipher_text: var_cipherText,
        };
    }
}

impl SseDecode for crate::types::AesEncryptReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <Vec<u8>>::sse_decode(deserializer);
        let mut var_iv = <Vec<u8>>::sse_decode(deserializer);
        let mut var_message = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::AesEncryptReq {
            key: var_key,
            iv: var_iv,
            message: var_message,
        };
    }
}

impl SseDecode for crate::types::BLSVerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_signature = <Vec<u8>>::sse_decode(deserializer);
        let mut var_message = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKey = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::BLSVerifyReq {
            signature: var_signature,
            message: var_message,
            public_key: var_publicKey,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::types::ED25519FromSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::ED25519FromSeedReq { seed: var_seed };
    }
}

impl SseDecode for crate::types::ED25519Res {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKey = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::ED25519Res {
            seed: var_seed,
            public_key: var_publicKey,
        };
    }
}

impl SseDecode for crate::types::ED25519SignReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        let mut var_message = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::ED25519SignReq {
            seed: var_seed,
            message: var_message,
        };
    }
}

impl SseDecode for crate::types::ED25519VerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_sig = <Vec<u8>>::sse_decode(deserializer);
        let mut var_message = <Vec<u8>>::sse_decode(deserializer);
        let mut var_pubKey = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::ED25519VerifyReq {
            sig: var_sig,
            message: var_message,
            pub_key: var_pubKey,
        };
    }
}

impl SseDecode for crate::types::KeyDerivedRes {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_leftBits = <Vec<u8>>::sse_decode(deserializer);
        let mut var_rightBits = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::KeyDerivedRes {
            left_bits: var_leftBits,
            right_bits: var_rightBits,
        };
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::types::P256FromSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::P256FromSeedReq { seed: var_seed };
    }
}

impl SseDecode for crate::p256::P256IdentityExport {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_privateKeyHash = <Vec<u8>>::sse_decode(deserializer);
        let mut var_derEncodedPublicKey = <Vec<u8>>::sse_decode(deserializer);
        return crate::p256::P256IdentityExport {
            private_key_hash: var_privateKeyHash,
            der_encoded_public_key: var_derEncodedPublicKey,
        };
    }
}

impl SseDecode for crate::types::P256ShareSecretReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKeyRawBytes = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::P256ShareSecretReq {
            seed: var_seed,
            public_key_raw_bytes: var_publicKeyRawBytes,
        };
    }
}

impl SseDecode for crate::types::P256SignWithSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_msg = <Vec<u8>>::sse_decode(deserializer);
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::P256SignWithSeedReq {
            msg: var_msg,
            seed: var_seed,
        };
    }
}

impl SseDecode for crate::types::P256VerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_messageHash = <Vec<u8>>::sse_decode(deserializer);
        let mut var_signatureBytes = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKeyBytes = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::P256VerifyReq {
            message_hash: var_messageHash,
            signature_bytes: var_signatureBytes,
            public_key_bytes: var_publicKeyBytes,
        };
    }
}

impl SseDecode for crate::types::PBKDFDeriveReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_password = <Vec<u8>>::sse_decode(deserializer);
        let mut var_salt = <Vec<u8>>::sse_decode(deserializer);
        let mut var_c = <u32>::sse_decode(deserializer);
        return crate::types::PBKDFDeriveReq {
            password: var_password,
            salt: var_salt,
            c: var_c,
        };
    }
}

impl SseDecode for crate::types::PhraseToSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_phrase = <String>::sse_decode(deserializer);
        let mut var_password = <String>::sse_decode(deserializer);
        return crate::types::PhraseToSeedReq {
            phrase: var_phrase,
            password: var_password,
        };
    }
}

impl SseDecode for crate::types::SchnorrFromSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::SchnorrFromSeedReq { seed: var_seed };
    }
}

impl SseDecode for crate::schnorr::SchnorrIdentityExport {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_privateKeyHash = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKeyHash = <Vec<u8>>::sse_decode(deserializer);
        return crate::schnorr::SchnorrIdentityExport {
            private_key_hash: var_privateKeyHash,
            public_key_hash: var_publicKeyHash,
        };
    }
}

impl SseDecode for crate::types::SchnorrSignWithSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_msg = <Vec<u8>>::sse_decode(deserializer);
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        let mut var_auxRand = <Option<Vec<u8>>>::sse_decode(deserializer);
        return crate::types::SchnorrSignWithSeedReq {
            msg: var_msg,
            seed: var_seed,
            aux_rand: var_auxRand,
        };
    }
}

impl SseDecode for crate::types::SchnorrVerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_messageHash = <Vec<u8>>::sse_decode(deserializer);
        let mut var_signatureBytes = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKeyBytes = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::SchnorrVerifyReq {
            message_hash: var_messageHash,
            signature_bytes: var_signatureBytes,
            public_key_bytes: var_publicKeyBytes,
        };
    }
}

impl SseDecode for crate::types::ScriptDeriveReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_password = <Vec<u8>>::sse_decode(deserializer);
        let mut var_salt = <Vec<u8>>::sse_decode(deserializer);
        let mut var_n = <u32>::sse_decode(deserializer);
        let mut var_p = <u32>::sse_decode(deserializer);
        let mut var_r = <u32>::sse_decode(deserializer);
        return crate::types::ScriptDeriveReq {
            password: var_password,
            salt: var_salt,
            n: var_n,
            p: var_p,
            r: var_r,
        };
    }
}

impl SseDecode for crate::types::Secp256k1FromSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::Secp256k1FromSeedReq { seed: var_seed };
    }
}

impl SseDecode for crate::secp256k1::Secp256k1IdentityExport {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_privateKeyHash = <Vec<u8>>::sse_decode(deserializer);
        let mut var_derEncodedPublicKey = <Vec<u8>>::sse_decode(deserializer);
        return crate::secp256k1::Secp256k1IdentityExport {
            private_key_hash: var_privateKeyHash,
            der_encoded_public_key: var_derEncodedPublicKey,
        };
    }
}

impl SseDecode for crate::types::Secp256k1RecoverReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_messagePreHashed = <Vec<u8>>::sse_decode(deserializer);
        let mut var_signatureBytes = <Vec<u8>>::sse_decode(deserializer);
        let mut var_chainId = <Option<u8>>::sse_decode(deserializer);
        return crate::types::Secp256k1RecoverReq {
            message_pre_hashed: var_messagePreHashed,
            signature_bytes: var_signatureBytes,
            chain_id: var_chainId,
        };
    }
}

impl SseDecode for crate::types::Secp256k1ShareSecretReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKeyRawBytes = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::Secp256k1ShareSecretReq {
            seed: var_seed,
            public_key_raw_bytes: var_publicKeyRawBytes,
        };
    }
}

impl SseDecode for crate::types::Secp256k1SignWithRngReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_msg = <Vec<u8>>::sse_decode(deserializer);
        let mut var_privateBytes = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::Secp256k1SignWithRngReq {
            msg: var_msg,
            private_bytes: var_privateBytes,
        };
    }
}

impl SseDecode for crate::types::Secp256k1SignWithSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_msg = <Vec<u8>>::sse_decode(deserializer);
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::Secp256k1SignWithSeedReq {
            msg: var_msg,
            seed: var_seed,
        };
    }
}

impl SseDecode for crate::types::Secp256k1VerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_messageHash = <Vec<u8>>::sse_decode(deserializer);
        let mut var_signatureBytes = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKeyBytes = <Vec<u8>>::sse_decode(deserializer);
        return crate::types::Secp256k1VerifyReq {
            message_hash: var_messageHash,
            signature_bytes: var_signatureBytes,
            public_key_bytes: var_publicKeyBytes,
        };
    }
}

impl SseDecode for crate::types::SeedToKeyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        let mut var_path = <String>::sse_decode(deserializer);
        return crate::types::SeedToKeyReq {
            seed: var_seed,
            path: var_path,
        };
    }
}

impl SseDecode for crate::types::SignatureFFI {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_publicKey = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_signature = <Option<Vec<u8>>>::sse_decode(deserializer);
        return crate::types::SignatureFFI {
            public_key: var_publicKey,
            signature: var_signature,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__aes_128_ctr_decrypt_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__aes_128_ctr_encrypt_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__aes_256_cbc_decrypt_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__aes_256_cbc_encrypt_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__aes_256_gcm_decrypt_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__aes_256_gcm_encrypt_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__bls_init_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__bls_verify_impl(port, ptr, rust_vec_len, data_len),
        9 => wire__crate__api__ed25519_from_seed_impl(port, ptr, rust_vec_len, data_len),
        10 => wire__crate__api__ed25519_sign_impl(port, ptr, rust_vec_len, data_len),
        11 => wire__crate__api__ed25519_verify_impl(port, ptr, rust_vec_len, data_len),
        12 => wire__crate__api__mnemonic_phrase_to_seed_impl(port, ptr, rust_vec_len, data_len),
        13 => wire__crate__api__mnemonic_seed_to_key_impl(port, ptr, rust_vec_len, data_len),
        14 => wire__crate__api__p256_from_seed_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__p256_get_shared_secret_impl(port, ptr, rust_vec_len, data_len),
        16 => wire__crate__api__p256_sign_impl(port, ptr, rust_vec_len, data_len),
        17 => wire__crate__api__p256_verify_impl(port, ptr, rust_vec_len, data_len),
        18 => wire__crate__api__pbkdf2_derive_key_impl(port, ptr, rust_vec_len, data_len),
        19 => wire__crate__api__schnorr_from_seed_impl(port, ptr, rust_vec_len, data_len),
        20 => wire__crate__api__schnorr_sign_impl(port, ptr, rust_vec_len, data_len),
        21 => wire__crate__api__schnorr_verify_impl(port, ptr, rust_vec_len, data_len),
        22 => wire__crate__api__scrypt_derive_key_impl(port, ptr, rust_vec_len, data_len),
        23 => wire__crate__api__secp256k1_from_seed_impl(port, ptr, rust_vec_len, data_len),
        24 => wire__crate__api__secp256k1_get_shared_secret_impl(port, ptr, rust_vec_len, data_len),
        25 => wire__crate__api__secp256k1_recover_impl(port, ptr, rust_vec_len, data_len),
        26 => wire__crate__api__secp256k1_sign_impl(port, ptr, rust_vec_len, data_len),
        27 => wire__crate__api__secp256k1_sign_recoverable_impl(port, ptr, rust_vec_len, data_len),
        28 => wire__crate__api__secp256k1_sign_with_rng_impl(port, ptr, rust_vec_len, data_len),
        29 => wire__crate__api__secp256k1_verify_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::AesDecryptReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.iv.into_into_dart().into_dart(),
            self.cipher_text.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::AesDecryptReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::AesDecryptReq>
    for crate::types::AesDecryptReq
{
    fn into_into_dart(self) -> crate::types::AesDecryptReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::AesEncryptReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.iv.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::AesEncryptReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::AesEncryptReq>
    for crate::types::AesEncryptReq
{
    fn into_into_dart(self) -> crate::types::AesEncryptReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::BLSVerifyReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.signature.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
            self.public_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::BLSVerifyReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::BLSVerifyReq> for crate::types::BLSVerifyReq {
    fn into_into_dart(self) -> crate::types::BLSVerifyReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::ED25519FromSeedReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.seed.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::ED25519FromSeedReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::ED25519FromSeedReq>
    for crate::types::ED25519FromSeedReq
{
    fn into_into_dart(self) -> crate::types::ED25519FromSeedReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::ED25519Res {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.seed.into_into_dart().into_dart(),
            self.public_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::ED25519Res {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::ED25519Res> for crate::types::ED25519Res {
    fn into_into_dart(self) -> crate::types::ED25519Res {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::ED25519SignReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.seed.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::ED25519SignReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::ED25519SignReq>
    for crate::types::ED25519SignReq
{
    fn into_into_dart(self) -> crate::types::ED25519SignReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::ED25519VerifyReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.sig.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
            self.pub_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::ED25519VerifyReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::ED25519VerifyReq>
    for crate::types::ED25519VerifyReq
{
    fn into_into_dart(self) -> crate::types::ED25519VerifyReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::KeyDerivedRes {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.left_bits.into_into_dart().into_dart(),
            self.right_bits.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::KeyDerivedRes {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::KeyDerivedRes>
    for crate::types::KeyDerivedRes
{
    fn into_into_dart(self) -> crate::types::KeyDerivedRes {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::P256FromSeedReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.seed.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::P256FromSeedReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::P256FromSeedReq>
    for crate::types::P256FromSeedReq
{
    fn into_into_dart(self) -> crate::types::P256FromSeedReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::p256::P256IdentityExport {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.private_key_hash.into_into_dart().into_dart(),
            self.der_encoded_public_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::p256::P256IdentityExport
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::p256::P256IdentityExport>
    for crate::p256::P256IdentityExport
{
    fn into_into_dart(self) -> crate::p256::P256IdentityExport {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::P256ShareSecretReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.seed.into_into_dart().into_dart(),
            self.public_key_raw_bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::P256ShareSecretReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::P256ShareSecretReq>
    for crate::types::P256ShareSecretReq
{
    fn into_into_dart(self) -> crate::types::P256ShareSecretReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::P256SignWithSeedReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.msg.into_into_dart().into_dart(),
            self.seed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::P256SignWithSeedReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::P256SignWithSeedReq>
    for crate::types::P256SignWithSeedReq
{
    fn into_into_dart(self) -> crate::types::P256SignWithSeedReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::P256VerifyReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.message_hash.into_into_dart().into_dart(),
            self.signature_bytes.into_into_dart().into_dart(),
            self.public_key_bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::P256VerifyReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::P256VerifyReq>
    for crate::types::P256VerifyReq
{
    fn into_into_dart(self) -> crate::types::P256VerifyReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::PBKDFDeriveReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.password.into_into_dart().into_dart(),
            self.salt.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::PBKDFDeriveReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::PBKDFDeriveReq>
    for crate::types::PBKDFDeriveReq
{
    fn into_into_dart(self) -> crate::types::PBKDFDeriveReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::PhraseToSeedReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.phrase.into_into_dart().into_dart(),
            self.password.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::PhraseToSeedReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::PhraseToSeedReq>
    for crate::types::PhraseToSeedReq
{
    fn into_into_dart(self) -> crate::types::PhraseToSeedReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::SchnorrFromSeedReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.seed.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::SchnorrFromSeedReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::SchnorrFromSeedReq>
    for crate::types::SchnorrFromSeedReq
{
    fn into_into_dart(self) -> crate::types::SchnorrFromSeedReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::schnorr::SchnorrIdentityExport {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.private_key_hash.into_into_dart().into_dart(),
            self.public_key_hash.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::schnorr::SchnorrIdentityExport
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::schnorr::SchnorrIdentityExport>
    for crate::schnorr::SchnorrIdentityExport
{
    fn into_into_dart(self) -> crate::schnorr::SchnorrIdentityExport {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::SchnorrSignWithSeedReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.msg.into_into_dart().into_dart(),
            self.seed.into_into_dart().into_dart(),
            self.aux_rand.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::SchnorrSignWithSeedReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::SchnorrSignWithSeedReq>
    for crate::types::SchnorrSignWithSeedReq
{
    fn into_into_dart(self) -> crate::types::SchnorrSignWithSeedReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::SchnorrVerifyReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.message_hash.into_into_dart().into_dart(),
            self.signature_bytes.into_into_dart().into_dart(),
            self.public_key_bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::SchnorrVerifyReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::SchnorrVerifyReq>
    for crate::types::SchnorrVerifyReq
{
    fn into_into_dart(self) -> crate::types::SchnorrVerifyReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::ScriptDeriveReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.password.into_into_dart().into_dart(),
            self.salt.into_into_dart().into_dart(),
            self.n.into_into_dart().into_dart(),
            self.p.into_into_dart().into_dart(),
            self.r.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::ScriptDeriveReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::ScriptDeriveReq>
    for crate::types::ScriptDeriveReq
{
    fn into_into_dart(self) -> crate::types::ScriptDeriveReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::Secp256k1FromSeedReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.seed.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::Secp256k1FromSeedReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::Secp256k1FromSeedReq>
    for crate::types::Secp256k1FromSeedReq
{
    fn into_into_dart(self) -> crate::types::Secp256k1FromSeedReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::secp256k1::Secp256k1IdentityExport {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.private_key_hash.into_into_dart().into_dart(),
            self.der_encoded_public_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::secp256k1::Secp256k1IdentityExport
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::secp256k1::Secp256k1IdentityExport>
    for crate::secp256k1::Secp256k1IdentityExport
{
    fn into_into_dart(self) -> crate::secp256k1::Secp256k1IdentityExport {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::Secp256k1RecoverReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.message_pre_hashed.into_into_dart().into_dart(),
            self.signature_bytes.into_into_dart().into_dart(),
            self.chain_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::Secp256k1RecoverReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::Secp256k1RecoverReq>
    for crate::types::Secp256k1RecoverReq
{
    fn into_into_dart(self) -> crate::types::Secp256k1RecoverReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::Secp256k1ShareSecretReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.seed.into_into_dart().into_dart(),
            self.public_key_raw_bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::Secp256k1ShareSecretReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::Secp256k1ShareSecretReq>
    for crate::types::Secp256k1ShareSecretReq
{
    fn into_into_dart(self) -> crate::types::Secp256k1ShareSecretReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::Secp256k1SignWithRngReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.msg.into_into_dart().into_dart(),
            self.private_bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::Secp256k1SignWithRngReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::Secp256k1SignWithRngReq>
    for crate::types::Secp256k1SignWithRngReq
{
    fn into_into_dart(self) -> crate::types::Secp256k1SignWithRngReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::Secp256k1SignWithSeedReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.msg.into_into_dart().into_dart(),
            self.seed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::Secp256k1SignWithSeedReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::Secp256k1SignWithSeedReq>
    for crate::types::Secp256k1SignWithSeedReq
{
    fn into_into_dart(self) -> crate::types::Secp256k1SignWithSeedReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::Secp256k1VerifyReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.message_hash.into_into_dart().into_dart(),
            self.signature_bytes.into_into_dart().into_dart(),
            self.public_key_bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::types::Secp256k1VerifyReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::types::Secp256k1VerifyReq>
    for crate::types::Secp256k1VerifyReq
{
    fn into_into_dart(self) -> crate::types::Secp256k1VerifyReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::SeedToKeyReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.seed.into_into_dart().into_dart(),
            self.path.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::SeedToKeyReq {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::SeedToKeyReq> for crate::types::SeedToKeyReq {
    fn into_into_dart(self) -> crate::types::SeedToKeyReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::types::SignatureFFI {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.public_key.into_into_dart().into_dart(),
            self.signature.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::types::SignatureFFI {}
impl flutter_rust_bridge::IntoIntoDart<crate::types::SignatureFFI> for crate::types::SignatureFFI {
    fn into_into_dart(self) -> crate::types::SignatureFFI {
        self
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::types::AesDecryptReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.key, serializer);
        <Vec<u8>>::sse_encode(self.iv, serializer);
        <Vec<u8>>::sse_encode(self.cipher_text, serializer);
    }
}

impl SseEncode for crate::types::AesEncryptReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.key, serializer);
        <Vec<u8>>::sse_encode(self.iv, serializer);
        <Vec<u8>>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::types::BLSVerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.signature, serializer);
        <Vec<u8>>::sse_encode(self.message, serializer);
        <Vec<u8>>::sse_encode(self.public_key, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::types::ED25519FromSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
    }
}

impl SseEncode for crate::types::ED25519Res {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
        <Vec<u8>>::sse_encode(self.public_key, serializer);
    }
}

impl SseEncode for crate::types::ED25519SignReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
        <Vec<u8>>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::types::ED25519VerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.sig, serializer);
        <Vec<u8>>::sse_encode(self.message, serializer);
        <Vec<u8>>::sse_encode(self.pub_key, serializer);
    }
}

impl SseEncode for crate::types::KeyDerivedRes {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.left_bits, serializer);
        <Vec<u8>>::sse_encode(self.right_bits, serializer);
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::types::P256FromSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
    }
}

impl SseEncode for crate::p256::P256IdentityExport {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.private_key_hash, serializer);
        <Vec<u8>>::sse_encode(self.der_encoded_public_key, serializer);
    }
}

impl SseEncode for crate::types::P256ShareSecretReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
        <Vec<u8>>::sse_encode(self.public_key_raw_bytes, serializer);
    }
}

impl SseEncode for crate::types::P256SignWithSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.msg, serializer);
        <Vec<u8>>::sse_encode(self.seed, serializer);
    }
}

impl SseEncode for crate::types::P256VerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.message_hash, serializer);
        <Vec<u8>>::sse_encode(self.signature_bytes, serializer);
        <Vec<u8>>::sse_encode(self.public_key_bytes, serializer);
    }
}

impl SseEncode for crate::types::PBKDFDeriveReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.password, serializer);
        <Vec<u8>>::sse_encode(self.salt, serializer);
        <u32>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::types::PhraseToSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.phrase, serializer);
        <String>::sse_encode(self.password, serializer);
    }
}

impl SseEncode for crate::types::SchnorrFromSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
    }
}

impl SseEncode for crate::schnorr::SchnorrIdentityExport {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.private_key_hash, serializer);
        <Vec<u8>>::sse_encode(self.public_key_hash, serializer);
    }
}

impl SseEncode for crate::types::SchnorrSignWithSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.msg, serializer);
        <Vec<u8>>::sse_encode(self.seed, serializer);
        <Option<Vec<u8>>>::sse_encode(self.aux_rand, serializer);
    }
}

impl SseEncode for crate::types::SchnorrVerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.message_hash, serializer);
        <Vec<u8>>::sse_encode(self.signature_bytes, serializer);
        <Vec<u8>>::sse_encode(self.public_key_bytes, serializer);
    }
}

impl SseEncode for crate::types::ScriptDeriveReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.password, serializer);
        <Vec<u8>>::sse_encode(self.salt, serializer);
        <u32>::sse_encode(self.n, serializer);
        <u32>::sse_encode(self.p, serializer);
        <u32>::sse_encode(self.r, serializer);
    }
}

impl SseEncode for crate::types::Secp256k1FromSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
    }
}

impl SseEncode for crate::secp256k1::Secp256k1IdentityExport {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.private_key_hash, serializer);
        <Vec<u8>>::sse_encode(self.der_encoded_public_key, serializer);
    }
}

impl SseEncode for crate::types::Secp256k1RecoverReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.message_pre_hashed, serializer);
        <Vec<u8>>::sse_encode(self.signature_bytes, serializer);
        <Option<u8>>::sse_encode(self.chain_id, serializer);
    }
}

impl SseEncode for crate::types::Secp256k1ShareSecretReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
        <Vec<u8>>::sse_encode(self.public_key_raw_bytes, serializer);
    }
}

impl SseEncode for crate::types::Secp256k1SignWithRngReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.msg, serializer);
        <Vec<u8>>::sse_encode(self.private_bytes, serializer);
    }
}

impl SseEncode for crate::types::Secp256k1SignWithSeedReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.msg, serializer);
        <Vec<u8>>::sse_encode(self.seed, serializer);
    }
}

impl SseEncode for crate::types::Secp256k1VerifyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.message_hash, serializer);
        <Vec<u8>>::sse_encode(self.signature_bytes, serializer);
        <Vec<u8>>::sse_encode(self.public_key_bytes, serializer);
    }
}

impl SseEncode for crate::types::SeedToKeyReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.seed, serializer);
        <String>::sse_encode(self.path, serializer);
    }
}

impl SseEncode for crate::types::SignatureFFI {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<u8>>>::sse_encode(self.public_key, serializer);
        <Option<Vec<u8>>>::sse_encode(self.signature, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
